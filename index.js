const express = require('express');
const { Client, LocalAuth, MessageMedia } = require('whatsapp-web.js');
const qrcode = require('qrcode');
const axios = require('axios');
const cheerio = require('cheerio');
const fs = require('fs');
const path = require('path');

const app = express();
app.use(express.urlencoded({ extended: true }));
app.use(express.json());

let minPrice = 0;
let maxPrice = 999999;
let dateFilter = '—Å–µ–≥–æ–¥–Ω—è';
let CHAT_ID = null;
let availableChats = [];
let seen = new Set();
let sentLog = [];
let qrCodeData = '';

const SEEN_PATH = 'seen.json';
if (fs.existsSync(SEEN_PATH)) {
    seen = new Set(JSON.parse(fs.readFileSync(SEEN_PATH, 'utf-8')));
}
function saveSeen() {
    fs.writeFileSync(SEEN_PATH, JSON.stringify([...seen]), 'utf-8');
}
function log(msg) {
    console.log(`[${new Date().toLocaleTimeString()}] ${msg}`);
}

const client = new Client({ authStrategy: new LocalAuth() });

client.on('qr', async (qr) => {
    qrCodeData = await qrcode.toDataURL(qr);
    log('üì± –°–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –Ω–∞ http://localhost:3000');
});

client.on('ready', async () => {
    const chats = await client.getChats();
    availableChats = chats.filter(c => c.isGroup || c.isUser).map(c => ({
        id: c.id._serialized,
        name: c.name || c.id.user
    }));
    log('‚úÖ WhatsApp –ø–æ–¥–∫–ª—é—á—ë–Ω');
    monitor(); // –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
    setInterval(monitor, 30 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω
});

client.initialize();

async function getFirstNewAd(min, max, dateKey) {
    const res = await axios.get('https://doska.ykt.ru/');
    const $ = cheerio.load(res.data);

    for (const el of $('.d-post').toArray()) {
        const url = 'https://doska.ykt.ru' + $(el).find('a.d-post_link').attr('href');
        const title = $(el).find('.d-post_desc').text().trim();
        const priceText = $(el).find('.d-post_price').text().replace(/[^\d]/g, '');
        const price = parseInt(priceText || '0');
        const image = $(el).find('img').attr('src');
        const date = $(el).find('.d-post_date').text().trim().toLowerCase();
        const shortDesc = $(el).find('.d-post_text').text().trim().slice(0, 200);

        if (!seen.has(url) && price >= min && price <= max && date.includes(dateKey.toLowerCase())) {
            seen.add(url);
            saveSeen();
            return { title, price, url, image, date, shortDesc };
        }
    }

    return null;
}

async function monitor() {
    if (!CHAT_ID) {
        log('‚ùó CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω');
        return;
    }

    const ad = await getFirstNewAd(minPrice, maxPrice, dateFilter);
    if (!ad) {
        log('üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π');
        return;
    }

    const text = `üÜï –û–±—ä—è–≤–ª–µ–Ω–∏–µ
üî§ ${ad.title}
üí∞ ${ad.price} ‚ÇΩ
üìÖ ${ad.date}
üìÑ ${ad.shortDesc || '‚Äî'}
üîó ${ad.url}`;

    try {
        if (ad.image) {
            const media = await MessageMedia.fromUrl(ad.image);
            await client.sendMessage(CHAT_ID, media, { caption: text });
        } else {
            await client.sendMessage(CHAT_ID, text);
        }

        log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${ad.title}`);
        sentLog.unshift({ ...ad, time: new Date().toLocaleString() });
        if (sentLog.length > 50) sentLog.length = 50;
    } catch (err) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ${err.message}`);
    }
}

// === –í–ï–ë –ò–ù–¢–ï–†–§–ï–ô–° ===

app.get('/', (req, res) => {
    if (!client.info) {
        return res.send(`
            <!DOCTYPE html>
            <html lang="ru">
            <head>
              <meta charset="UTF-8">
              <title>–°–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥</title>
              <style>
                body { font-family: sans-serif; text-align: center; padding: 40px; background: #f4f4f4; }
                img { border: 1px solid #ccc; background: #fff; padding: 10px; max-width: 300px; }
              </style>
            </head>
            <body>
              <h2>üì± –°–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ WhatsApp</h2>
              <p>–û—Ç–∫—Ä–æ–π WhatsApp ‚Üí –ú–µ–Ω—é ‚Üí WhatsApp Web ‚Üí –°–∫–∞–Ω–∏—Ä—É–π –∫–æ–¥:</p>
              <img src="/qr" alt="QR-–∫–æ–¥ WhatsApp">
              <p>‚è≥ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...</p>
              <script>setTimeout(() => location.reload(), 5000);</script>
            </body>
            </html>
        `);
    }

    const options = availableChats.map(c =>
        `<option value="${c.id}" ${c.id === CHAT_ID ? 'selected' : ''}>${c.name}</option>`
    ).join('');

    return res.send(`
        <!DOCTYPE html>
        <html lang="ru">
        <head>
          <meta charset="UTF-8">
          <title>–§–∏–ª—å—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π</title>
          <style>
            body {
              font-family: sans-serif;
              max-width: 600px;
              margin: 30px auto;
              background: #f4f4f4;
              padding: 20px;
              border-radius: 10px;
            }
            label {
              display: block;
              margin: 10px 0 5px;
            }
            input, select {
              width: 100%;
              padding: 8px;
              font-size: 16px;
            }
            button {
              margin-top: 20px;
              width: 100%;
              padding: 10px;
              font-size: 16px;
              background: #28a745;
              color: white;
              border: none;
              border-radius: 5px;
            }
            h1 {
              text-align: center;
            }
            .link {
              display: block;
              margin-top: 15px;
              text-align: center;
            }
          </style>
        </head>
        <body>
          <h1>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞</h1>
          <form action="/set" method="POST">
            <label for="min">–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:</label>
            <input type="number" id="min" name="min" min="0" value="${minPrice}">

            <label for="max">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:</label>
            <input type="number" id="max" name="max" min="0" value="${maxPrice}">

            <label for="date">–§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ:</label>
            <select id="date" name="date">
              <option value="—Å–µ–≥–æ–¥–Ω—è" ${dateFilter === '—Å–µ–≥–æ–¥–Ω—è' ? 'selected' : ''}>–°–µ–≥–æ–¥–Ω—è</option>
              <option value="–≤—á–µ—Ä–∞" ${dateFilter === '–≤—á–µ—Ä–∞' ? 'selected' : ''}>–í—á–µ—Ä–∞</option>
              <option value="" ${dateFilter === '' ? 'selected' : ''}>–í—Å–µ –¥–∞—Ç—ã</option>
            </select>

            <label for="chat">–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å:</label>
            <select id="chat" name="chat">
              ${options}
            </select>

            <button type="submit">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
          </form>

          <a class="link" href="/log">üìú –õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–æ–∫</a>
        </body>
        </html>
    `);
});

app.get('/qr', (req, res) => {
    if (!qrCodeData) {
        return res.status(404).send('QR-–∫–æ–¥ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤');
    }
    const base64 = qrCodeData.replace(/^data:image\/png;base64,/, '');
    const imgBuffer = Buffer.from(base64, 'base64');
    res.writeHead(200, {
        'Content-Type': 'image/png',
        'Content-Length': imgBuffer.length
    });
    res.end(imgBuffer);
});

app.post('/set', (req, res) => {
    minPrice = parseInt(req.body.min || '0');
    maxPrice = parseInt(req.body.max || '999999');
    dateFilter = req.body.date || '—Å–µ–≥–æ–¥–Ω—è';
    CHAT_ID = req.body.chat || null;
    log(`‚úÖ –§–∏–ª—å—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: min=${minPrice}, max=${maxPrice}, –¥–∞—Ç–∞=${dateFilter}, —á–∞—Ç=${CHAT_ID}`);
    res.redirect('/');
});

app.get('/log', (req, res) => {
    const html = sentLog.map(ad => `
        <div style="margin:10px 0;padding:10px;border:1px solid #ccc">
            <strong>${ad.time}</strong><br>
            <b>${ad.title}</b> ‚Äî ${ad.price} ‚ÇΩ ‚Äî ${ad.date}<br>
            <small>${ad.shortDesc}</small><br>
            <a href="${ad.url}" target="_blank">üîó –û—Ç–∫—Ä—ã—Ç—å</a>
        </div>
    `).join('');
    res.send(`<h2>–õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–æ–∫</h2>${html}<br><a href="/">‚¨Ö –ù–∞–∑–∞–¥</a>`);
});
const PORT = process.env.PORT || 3000;

app.listen(PORT, () => log(`üåê –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:${PORT}`));
